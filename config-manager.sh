#!/bin/bash

# ============================================
# üéØ CENTRALIZED CONFIGURATION SCRIPT
# ============================================
# Script n√†y gi√∫p b·∫°n thay ƒë·ªïi c·∫•u h√¨nh ch·ªâ b·∫±ng 1 l·ªánh

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üéØ CENTRALIZED CONFIGURATION MANAGER${NC}"
echo "=================================="

# Function ƒë·ªÉ hi·ªÉn th·ªã menu
show_menu() {
    echo -e "\n${YELLOW}Ch·ªçn c·∫•u h√¨nh b·∫°n mu·ªën thay ƒë·ªïi:${NC}"
    echo "1. Backend Port (hi·ªán t·∫°i: $(grep BACKEND_PORT .env | cut -d'=' -f2))"
    echo "2. MySQL Port (hi·ªán t·∫°i: $(grep MYSQL_PORT .env | cut -d'=' -f2))"
    echo "3. Database Name (hi·ªán t·∫°i: $(grep MYSQL_DATABASE .env | cut -d'=' -f2))"
    echo "4. Database User (hi·ªán t·∫°i: $(grep MYSQL_USER .env | cut -d'=' -f2))"
    echo "5. Database Password (hi·ªán t·∫°i: $(grep MYSQL_PASSWORD .env | cut -d'=' -f2))"
    echo "6. Spring Profile (hi·ªán t·∫°i: $(grep SPRING_PROFILES_ACTIVE .env | cut -d'=' -f2))"
    echo "7. Seed Products Count (hi·ªán t·∫°i: $(grep APP_SEED_PRODUCTS .env | cut -d'=' -f2))"
    echo "8. Seed Customers Count (hi·ªán t·∫°i: $(grep APP_SEED_CUSTOMERS .env | cut -d'=' -f2))"
    echo "9. JWT Secret (hi·ªán t·∫°i: $(grep JWT_SECRET .env | cut -d'=' -f2 | cut -c1-20)...)"
    echo "10. JWT Expiration (hi·ªán t·∫°i: $(grep JWT_EXPIRATION .env | cut -d'=' -f2))"
    echo "11. Hi·ªÉn th·ªã t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i"
    echo "12. Qu·∫£n l√Ω backup c·∫•u h√¨nh"
    echo "0. Tho√°t"
    echo -e "\n${BLUE}L∆∞u √Ω: Sau khi thay ƒë·ªïi, ch·∫°y 'make restart' ƒë·ªÉ √°p d·ª•ng${NC}"
}

# Function ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã
update_config() {
    local key=$1
    local current_value=$2
    local description=$3
    
    echo -e "\n${YELLOW}$description${NC}"
    echo -e "Gi√° tr·ªã hi·ªán t·∫°i: ${GREEN}$current_value${NC}"
    read -p "Nh·∫≠p gi√° tr·ªã m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n): " new_value
    
    if [ ! -z "$new_value" ]; then
        # Backup file hi·ªán t·∫°i v√†o folder backups/env
        mkdir -p backups/env
        cp .env backups/env/.env.backup.$(date +%Y%m%d_%H%M%S)
        
        # C·∫≠p nh·∫≠t gi√° tr·ªã
        sed -i.tmp "s/^${key}=.*/${key}=${new_value}/" .env
        rm .env.tmp
        
        echo -e "${GREEN}‚úÖ ƒê√£ c·∫≠p nh·∫≠t $key t·ª´ '$current_value' th√†nh '$new_value'${NC}"
        echo -e "${BLUE}üíæ Backup ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o backups/env/${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Gi·ªØ nguy√™n gi√° tr·ªã hi·ªán t·∫°i${NC}"
    fi
}

# Function ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ c·∫•u h√¨nh
show_all_config() {
    echo -e "\n${BLUE}üìã T·∫§T C·∫¢ C·∫§U H√åNH HI·ªÜN T·∫†I:${NC}"
    echo "=================================="
    cat .env | grep -v "^#" | grep -v "^$" | while read line; do
        if [ ! -z "$line" ]; then
            key=$(echo $line | cut -d'=' -f1)
            value=$(echo $line | cut -d'=' -f2)
            echo -e "${GREEN}$key${NC} = ${YELLOW}$value${NC}"
        fi
    done
}

# Function ƒë·ªÉ qu·∫£n l√Ω backup
manage_backups() {
    echo -e "\n${BLUE}üíæ QU·∫¢N L√ù BACKUP C·∫§U H√åNH${NC}"
    echo "=============================="
    echo "1. T·∫°o backup hi·ªán t·∫°i"
    echo "2. Li·ªát k√™ t·∫•t c·∫£ backup"
    echo "3. Kh√¥i ph·ª•c t·ª´ backup"
    echo "4. X√≥a backup c≈© (gi·ªØ l·∫°i 5 file g·∫ßn nh·∫•t)"
    echo "0. Quay l·∫°i menu ch√≠nh"
    
    read -p "Ch·ªçn t√πy ch·ªçn (0-4): " backup_choice
    
    case $backup_choice in
        1)
            mkdir -p backups/env
            cp .env backups/env/.env.backup.$(date +%Y%m%d_%H%M%S)
            echo -e "${GREEN}‚úÖ Backup ƒë√£ ƒë∆∞·ª£c t·∫°o trong backups/env/${NC}"
            ;;
        2)
            echo -e "\n${YELLOW}üìã Available Backups:${NC}"
            if [ -d "backups/env" ] && [ "$(ls -A backups/env 2>/dev/null)" ]; then
                ls -la backups/env/.env.backup.* 2>/dev/null | while read line; do
                    filename=$(echo $line | awk '{print $9}')
                    date=$(echo $filename | sed 's/.*\.env\.backup\.//')
                    size=$(echo $line | awk '{print $5}')
                    echo -e "  üìÑ $filename ($size bytes) - $date"
                done
            else
                echo -e "  ‚ùå No backups found in backups/env/"
            fi
            ;;
        3)
            echo -e "\n${YELLOW}Available Backups:${NC}"
            if [ -d "backups/env" ] && [ "$(ls -A backups/env 2>/dev/null)" ]; then
                ls -t backups/env/.env.backup.* | head -5 | while read file; do
                    echo "  üìÑ $file"
                done
                echo ""
                read -p "Nh·∫≠p t√™n file backup ƒë·ªÉ kh√¥i ph·ª•c: " backup_file
                if [ -f "backups/env/$backup_file" ]; then
                    cp backups/env/$backup_file .env
                    echo -e "${GREEN}‚úÖ Configuration restored from $backup_file${NC}"
                    echo -e "${BLUE}üí° Run 'make restart' to apply changes${NC}"
                else
                    echo -e "${RED}‚ùå Backup file '$backup_file' not found${NC}"
                fi
            else
                echo -e "  ‚ùå No backups found in backups/env/"
            fi
            ;;
        4)
            if [ -d "backups/env" ]; then
                count=$(ls backups/env/.env.backup.* 2>/dev/null | wc -l)
                if [ $count -gt 5 ]; then
                    ls -t backups/env/.env.backup.* | tail -n +6 | xargs rm -f
                    echo -e "${GREEN}‚úÖ Removed $(($count - 5)) old backup(s)${NC}"
                else
                    echo -e "${YELLOW}‚úÖ No old backups to clean ($count backups total)${NC}"
                fi
            else
                echo -e "${RED}‚ùå No backup directory found${NC}"
            fi
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá${NC}"
            ;;
    esac
    
    echo -e "\n${BLUE}Press Enter to continue...${NC}"
    read
}

# Main menu loop
while true; do
    show_menu
    read -p "Ch·ªçn t√πy ch·ªçn (0-12): " choice
    
    case $choice in
        1)
            current=$(grep BACKEND_PORT .env | cut -d'=' -f2)
            update_config "BACKEND_PORT" "$current" "üåê Backend Port Configuration"
            ;;
        2)
            current=$(grep MYSQL_PORT .env | cut -d'=' -f2)
            update_config "MYSQL_PORT" "$current" "üóÑÔ∏è MySQL Port Configuration"
            ;;
        3)
            current=$(grep MYSQL_DATABASE .env | cut -d'=' -f2)
            update_config "MYSQL_DATABASE" "$current" "üìä Database Name Configuration"
            ;;
        4)
            current=$(grep MYSQL_USER .env | cut -d'=' -f2)
            update_config "MYSQL_USER" "$current" "üë§ Database User Configuration"
            ;;
        5)
            current=$(grep MYSQL_PASSWORD .env | cut -d'=' -f2)
            update_config "MYSQL_PASSWORD" "$current" "üîê Database Password Configuration"
            ;;
        6)
            current=$(grep SPRING_PROFILES_ACTIVE .env | cut -d'=' -f2)
            update_config "SPRING_PROFILES_ACTIVE" "$current" "‚öôÔ∏è Spring Profile Configuration"
            ;;
        7)
            current=$(grep APP_SEED_PRODUCTS .env | cut -d'=' -f2)
            update_config "APP_SEED_PRODUCTS" "$current" "üå± Seed Products Count Configuration"
            ;;
        8)
            current=$(grep APP_SEED_CUSTOMERS .env | cut -d'=' -f2)
            update_config "APP_SEED_CUSTOMERS" "$current" "üë• Seed Customers Count Configuration"
            ;;
        9)
            current=$(grep JWT_SECRET .env | cut -d'=' -f2)
            update_config "JWT_SECRET" "$current" "üîê JWT Secret Configuration"
            ;;
        10)
            current=$(grep JWT_EXPIRATION .env | cut -d'=' -f2)
            update_config "JWT_EXPIRATION" "$current" "‚è∞ JWT Expiration Configuration (milliseconds)"
            ;;
        11)
            show_all_config
            ;;
        12)
            manage_backups
            ;;
        0)
            echo -e "\n${GREEN}üëã T·∫°m bi·ªát!${NC}"
            echo -e "${BLUE}üí° Nh·ªõ ch·∫°y 'make restart' ƒë·ªÉ √°p d·ª•ng c√°c thay ƒë·ªïi${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 0-12${NC}"
            ;;
    esac
    
    echo -e "\n${BLUE}Press Enter to continue...${NC}"
    read
done
