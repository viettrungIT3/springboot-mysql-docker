/* tslint:disable */
/* eslint-disable */
/**
 * Spring Boot + MySQL – Inventory API
 * API mẫu cho dự án Spring Boot + MySQL + Docker. Bao gồm Products, Customers, Orders, Suppliers, Stock Management... Hỗ trợ pagination, validation, và exception handling. 
 *
 * The version of the OpenAPI document: v1
 * Contact: viettrungcntt03@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { PageResponse } from '../models';
// @ts-ignore
import type { ProductCreateRequest } from '../models';
// @ts-ignore
import type { ProductResponse } from '../models';
// @ts-ignore
import type { ProductUpdateRequest } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tạo sản phẩm mới trong hệ thống
         * @summary Create product
         * @param {ProductCreateRequest} productCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (productCreateRequest: ProductCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCreateRequest' is not null or undefined
            assertParamExists('create3', 'productCreateRequest', productCreateRequest)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xóa một sản phẩm khỏi hệ thống (soft delete - đánh dấu deleted_at, dữ liệu vẫn còn trong DB)
         * @summary Delete product
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete3', 'id', id)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xuất danh sách sản phẩm dưới dạng CSV
         * @summary Export products to CSV
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCsv: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products/export-csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm
         * @summary Get product by ID
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById3', 'id', id)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm bằng slug (SEO-friendly)
         * @summary Get product by slug
         * @param {string} slug Slug của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getBySlug', 'slug', slug)
            const localVarPath = `/api/v1/products/slug/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy danh sách sản phẩm có số lượng tồn kho thấp
         * @summary Get low stock products
         * @param {number} [threshold] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowStockProducts: async (threshold?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products/low-stock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (threshold !== undefined) {
                localVarQueryParameter['threshold'] = threshold;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tải lên file CSV để tạo/cập nhật sản phẩm (cột: name,description,price,quantityInStock)
         * @summary Import products from CSV
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCsv: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('importCsv', 'file', file)
            const localVarPath = `/api/v1/products/import-csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy danh sách sản phẩm với hỗ trợ phân trang, sắp xếp và tìm kiếm
         * @summary List products with pagination, sorting, search
         * @param {number} [page] Số trang (bắt đầu từ 0)
         * @param {number} [size] Kích thước trang
         * @param {string} [sort] Định dạng sort: field,asc|desc
         * @param {string} [search] Từ khóa tìm kiếm theo tên sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list3: async (page?: number, size?: number, sort?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cập nhật thông tin sản phẩm
         * @summary Update product
         * @param {number} id ID của sản phẩm
         * @param {ProductUpdateRequest} productUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (id: number, productUpdateRequest: ProductUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update3', 'id', id)
            // verify required parameter 'productUpdateRequest' is not null or undefined
            assertParamExists('update3', 'productUpdateRequest', productUpdateRequest)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Tạo sản phẩm mới trong hệ thống
         * @summary Create product
         * @param {ProductCreateRequest} productCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(productCreateRequest: ProductCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create3(productCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.create3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Xóa một sản phẩm khỏi hệ thống (soft delete - đánh dấu deleted_at, dữ liệu vẫn còn trong DB)
         * @summary Delete product
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.delete3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Xuất danh sách sản phẩm dưới dạng CSV
         * @summary Export products to CSV
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportCsv(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportCsv(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.exportCsv']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm
         * @summary Get product by ID
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getById3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm bằng slug (SEO-friendly)
         * @summary Get product by slug
         * @param {string} slug Slug của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySlug(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getBySlug']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lấy danh sách sản phẩm có số lượng tồn kho thấp
         * @summary Get low stock products
         * @param {number} [threshold] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLowStockProducts(threshold?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLowStockProducts(threshold, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getLowStockProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Tải lên file CSV để tạo/cập nhật sản phẩm (cột: name,description,price,quantityInStock)
         * @summary Import products from CSV
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importCsv(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importCsv(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.importCsv']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lấy danh sách sản phẩm với hỗ trợ phân trang, sắp xếp và tìm kiếm
         * @summary List products with pagination, sorting, search
         * @param {number} [page] Số trang (bắt đầu từ 0)
         * @param {number} [size] Kích thước trang
         * @param {string} [sort] Định dạng sort: field,asc|desc
         * @param {string} [search] Từ khóa tìm kiếm theo tên sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list3(page?: number, size?: number, sort?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list3(page, size, sort, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.list3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cập nhật thông tin sản phẩm
         * @summary Update product
         * @param {number} id ID của sản phẩm
         * @param {ProductUpdateRequest} productUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(id: number, productUpdateRequest: ProductUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update3(id, productUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.update3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Tạo sản phẩm mới trong hệ thống
         * @summary Create product
         * @param {ProductCreateRequest} productCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3(productCreateRequest: ProductCreateRequest, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.create3(productCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Xóa một sản phẩm khỏi hệ thống (soft delete - đánh dấu deleted_at, dữ liệu vẫn còn trong DB)
         * @summary Delete product
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.delete3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Xuất danh sách sản phẩm dưới dạng CSV
         * @summary Export products to CSV
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCsv(options?: any): AxiosPromise<string> {
            return localVarFp.exportCsv(options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm
         * @summary Get product by ID
         * @param {number} id ID của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById3(id: number, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.getById3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin chi tiết của một sản phẩm bằng slug (SEO-friendly)
         * @summary Get product by slug
         * @param {string} slug Slug của sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySlug(slug: string, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.getBySlug(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy danh sách sản phẩm có số lượng tồn kho thấp
         * @summary Get low stock products
         * @param {number} [threshold] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowStockProducts(threshold?: number, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.getLowStockProducts(threshold, options).then((request) => request(axios, basePath));
        },
        /**
         * Tải lên file CSV để tạo/cập nhật sản phẩm (cột: name,description,price,quantityInStock)
         * @summary Import products from CSV
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCsv(file: File, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.importCsv(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy danh sách sản phẩm với hỗ trợ phân trang, sắp xếp và tìm kiếm
         * @summary List products with pagination, sorting, search
         * @param {number} [page] Số trang (bắt đầu từ 0)
         * @param {number} [size] Kích thước trang
         * @param {string} [sort] Định dạng sort: field,asc|desc
         * @param {string} [search] Từ khóa tìm kiếm theo tên sản phẩm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list3(page?: number, size?: number, sort?: string, search?: string, options?: any): AxiosPromise<PageResponse> {
            return localVarFp.list3(page, size, sort, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Cập nhật thông tin sản phẩm
         * @summary Update product
         * @param {number} id ID của sản phẩm
         * @param {ProductUpdateRequest} productUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3(id: number, productUpdateRequest: ProductUpdateRequest, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.update3(id, productUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Tạo sản phẩm mới trong hệ thống
     * @summary Create product
     * @param {ProductCreateRequest} productCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public create3(productCreateRequest: ProductCreateRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).create3(productCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xóa một sản phẩm khỏi hệ thống (soft delete - đánh dấu deleted_at, dữ liệu vẫn còn trong DB)
     * @summary Delete product
     * @param {number} id ID của sản phẩm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public delete3(id: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).delete3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xuất danh sách sản phẩm dưới dạng CSV
     * @summary Export products to CSV
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public exportCsv(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).exportCsv(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin chi tiết của một sản phẩm
     * @summary Get product by ID
     * @param {number} id ID của sản phẩm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getById3(id: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getById3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin chi tiết của một sản phẩm bằng slug (SEO-friendly)
     * @summary Get product by slug
     * @param {string} slug Slug của sản phẩm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getBySlug(slug: string, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getBySlug(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy danh sách sản phẩm có số lượng tồn kho thấp
     * @summary Get low stock products
     * @param {number} [threshold] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getLowStockProducts(threshold?: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getLowStockProducts(threshold, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tải lên file CSV để tạo/cập nhật sản phẩm (cột: name,description,price,quantityInStock)
     * @summary Import products from CSV
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public importCsv(file: File, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).importCsv(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy danh sách sản phẩm với hỗ trợ phân trang, sắp xếp và tìm kiếm
     * @summary List products with pagination, sorting, search
     * @param {number} [page] Số trang (bắt đầu từ 0)
     * @param {number} [size] Kích thước trang
     * @param {string} [sort] Định dạng sort: field,asc|desc
     * @param {string} [search] Từ khóa tìm kiếm theo tên sản phẩm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public list3(page?: number, size?: number, sort?: string, search?: string, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).list3(page, size, sort, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cập nhật thông tin sản phẩm
     * @summary Update product
     * @param {number} id ID của sản phẩm
     * @param {ProductUpdateRequest} productUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public update3(id: number, productUpdateRequest: ProductUpdateRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).update3(id, productUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

