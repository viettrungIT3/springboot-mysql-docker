# ==== Project shortcuts (Day 1) ====
# Usage: make <target>
# Ex: make up, make logs, make rebuild, make sh-db, make boot

# ---- Config ----
COMPOSE_FILE ?= docker-compose.yml
ENV_FILE     ?= .env
SERVICE_APP  ?= backend
SERVICE_DB   ?= mysql
BACKEND_PORT ?= 8080
# ---- End config ----

# ---- Helpers ----
DC = docker compose --env-file $(ENV_FILE) -f $(COMPOSE_FILE)

.DEFAULT_GOAL := help

.PHONY: help
help: ## üìö Hi·ªÉn th·ªã danh s√°ch l·ªánh h·ªØu √≠ch
	@echo "\nüöÄ Spring Boot + MySQL Development Shortcuts"
	@echo "\nüì¶ CONTAINER LIFECYCLE:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / && /up|down|restart|dev-/ {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo "\nüîç MONITORING & DEBUG:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / && /logs|ps|health|sh-/ {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo "\nüî® BUILD & TEST:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / && /rebuild|boot|test|clean|unit-/ {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo "\nüìñ DOCUMENTATION & API:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / && /swagger|db-/ {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo "\nüéØ QUICK START:"
	@echo "  \033[33mmake dev-start\033[0m     ‚Üí Start development environment"
	@echo "  \033[33mmake test-api\033[0m      ‚Üí Test API validation"
	@echo "  \033[33mmake swagger\033[0m       ‚Üí Open Swagger UI"
	@echo ""

.PHONY: up
up: ## üöÄ B·∫≠t stack (detached)
	@echo "üöÄ Starting Docker stack..."
	$(DC) up -d
	@echo "‚úÖ Stack started successfully!"

.PHONY: dev-start
dev-start: ## üî• Start development environment (mysql + backend)
	@echo "üî• Starting development environment..."
	$(DC) up -d mysql
	@echo "‚è≥ Waiting for MySQL to be ready..."
	@sleep 10
	$(DC) up -d backend
	@echo "‚è≥ Waiting for backend to start..."
	@sleep 15
	@echo "\n‚úÖ Development environment ready!"
	@echo "üìä Backend API: http://localhost:$(BACKEND_PORT)/api/v1/products"
	@echo "üìñ Swagger UI: http://localhost:$(BACKEND_PORT)/swagger-ui/index.html"
	@echo "üéØ Quick test: make test-api"

.PHONY: dev-rebuild
dev-rebuild: ## üîÑ Rebuild and restart backend for development
	@echo "üîÑ Rebuilding backend..."
	$(DC) stop $(SERVICE_APP)
	$(DC) build $(SERVICE_APP)
	$(DC) up -d $(SERVICE_APP)
	@echo "‚è≥ Waiting for backend to restart..."
	@sleep 10
	@echo "‚úÖ Backend rebuilt and restarted!"

.PHONY: down
down: ## üõë T·∫Øt stack v√† remove orphans
	@echo "üõë Stopping Docker stack..."
	$(DC) down --remove-orphans
	@echo "‚úÖ Stack stopped successfully!"

.PHONY: restart
restart: ## üîÉ Restart stack
	@echo "üîÉ Restarting stack..."
	$(MAKE) down
	$(MAKE) up

.PHONY: logs
logs: ## üìÑ Tail logs c·ªßa backend
	@echo "üìÑ Following backend logs (Ctrl+C to stop)..."
	$(DC) logs -f $(SERVICE_APP)

.PHONY: logs-all
logs-all: ## Tail logs t·∫•t c·∫£ services
	$(DC) logs -f

.PHONY: ps
ps: ## Tr·∫°ng th√°i containers
	$(DC) ps

.PHONY: rebuild
rebuild: ## Build l·∫°i image backend (no-cache)
	$(DC) build --no-cache $(SERVICE_APP)

.PHONY: boot
boot: ## Ch·∫°y Spring Boot local (kh√¥ng d√πng Docker), profile=dev
	SPRING_PROFILES_ACTIVE=dev ./gradlew bootRun

.PHONY: test
test: ## Ch·∫°y test Gradle local
	./gradlew clean test

.PHONY: sh-app
sh-app: ## Shell v√†o container backend
	$(DC) exec $(SERVICE_APP) sh -lc 'printenv | sort; echo "---"; /bin/sh'

.PHONY: sh-db
sh-db: ## M·ªü MySQL CLI ngay trong container db (d√πng bi·∫øn env t·ª´ .env)
	$(DC) exec $(SERVICE_DB) sh -lc 'mysql -u$${MYSQL_USER:-root} -p$${MYSQL_PASSWORD:-$$MYSQL_ROOT_PASSWORD} $${MYSQL_DATABASE}'

.PHONY: db-logs
db-logs: ## Tail logs MySQL
	$(DC) logs -f $(SERVICE_DB)

.PHONY: clean
clean: ## üßπ Down + x√≥a volumes v√† prune images dangling
	@echo "üßπ Cleaning up Docker resources..."
	$(DC) down -v --remove-orphans || true
	@echo "üóëÔ∏è  Removing dangling images..."
	docker image prune -f || true
	@echo "üìä Docker space usage:"
	@docker system df

.PHONY: health
health: ## üè• Check health of all services
	@echo "üè• Health Check Report"
	@echo "===================="
	@echo "üì¶ Container Status:"
	@$(DC) ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
	@echo "\nüîó Backend Health:"
	@curl -s -o /dev/null -w "  Status: %{http_code} - %{url_effective}\n" http://localhost:$(BACKEND_PORT)/api/v1/products || echo "  ‚ùå Backend: Unreachable"
	@echo "\nüóÑÔ∏è  Database Connection:"
	@$(DC) exec $(SERVICE_DB) sh -c 'mysqladmin ping -h localhost' 2>/dev/null && echo "  ‚úÖ Database: Connected" || echo "  ‚ùå Database: Error"
	@echo "\nüìä Resource Usage:"
	@docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(shell docker compose ps -q 2>/dev/null) 2>/dev/null || echo "  No containers running"


.PHONY: swagger
swagger: ## üìñ Open Swagger UI in browser
	@echo "üìñ Opening Swagger UI..."
	@echo "URL: http://localhost:$(BACKEND_PORT)/swagger-ui/index.html"
	@command -v open >/dev/null 2>&1 && open "http://localhost:$(BACKEND_PORT)/swagger-ui/index.html" || \
	 command -v xdg-open >/dev/null 2>&1 && xdg-open "http://localhost:$(BACKEND_PORT)/swagger-ui/index.html" || \
	 echo "‚ö†Ô∏è  Please manually open the URL above"

# ==== Day 3 - Validation & Testing shortcuts ====

.PHONY: test-swagger
test-swagger: ## üß™ Test Swagger UI accessibility
	@echo "üß™ Testing Swagger UI accessibility..."
	@echo "üìñ Swagger UI:"
	@curl -s -o /dev/null -w "  Status: %{http_code} - %{url_effective}\n" http://localhost:$(BACKEND_PORT)/swagger-ui/index.html || echo "  ‚ùå Swagger UI: Unreachable"
	@echo "üìã API Documentation:"
	@curl -s -o /dev/null -w "  Status: %{http_code} - %{url_effective}\n" http://localhost:$(BACKEND_PORT)/v3/api-docs || echo "  ‚ùå API Docs: Unreachable"
	@curl -s http://localhost:$(BACKEND_PORT)/v3/api-docs | jq -r '.info.title + " v" + .info.version' 2>/dev/null && echo "  ‚úÖ API Documentation loaded" || echo "  ‚ö†Ô∏è  API docs available but no jq parser"

.PHONY: test-api
test-api: ## üß™ Test API endpoints v·ªõi validation
	@echo "üß™ Testing API validation endpoints..."
	@echo "\n‚úÖ Test 1: Valid product creation (expect 201)"
	@curl -X POST http://localhost:$(BACKEND_PORT)/api/v1/products \
		-H "Content-Type: application/json" \
		-d '{"name": "Test Product", "description": "Valid product", "price": 99.99, "quantityInStock": 10}' \
		-w "  Status: %{http_code}\n" -s | jq '.' 2>/dev/null || echo "  Response received"
	@echo "\n‚ùå Test 2: Invalid product (expect 400 with validation errors)"
	@curl -X POST http://localhost:$(BACKEND_PORT)/api/v1/products \
		-H "Content-Type: application/json" \
		-d '{"name": "", "price": -5, "quantityInStock": -1}' \
		-w "  Status: %{http_code}\n" -s | jq '.fieldErrors // .' 2>/dev/null || echo "  Validation errors received"
	@echo "\nüîç Test 3: Resource not found (expect 404)"
	@curl -X GET http://localhost:$(BACKEND_PORT)/api/v1/products/999 \
		-H "Content-Type: application/json" \
		-w "  Status: %{http_code}\n" -s | jq '.' 2>/dev/null || echo "  404 error received"
	@echo "\nüìä Test 4: List all products (expect 200)"
	@curl -X GET http://localhost:$(BACKEND_PORT)/api/v1/products \
		-H "Content-Type: application/json" \
		-w "  Status: %{http_code}\n" -s | jq 'length // "Response received"' 2>/dev/null || echo "  Product list received"

# ==== Advanced Development Tools ====

.PHONY: install-deps
install-deps: ## üì¶ Install development dependencies (jq, etc.)
	@echo "üì¶ Installing development dependencies..."
	@command -v jq >/dev/null 2>&1 || (echo "Installing jq..." && \
		(command -v apt-get >/dev/null 2>&1 && sudo apt-get install -y jq) || \
		(command -v yum >/dev/null 2>&1 && sudo yum install -y jq) || \
		(command -v brew >/dev/null 2>&1 && brew install jq) || \
		echo "‚ö†Ô∏è  Please install jq manually for better JSON parsing")
	@echo "‚úÖ Dependencies check completed"

.PHONY: full-reset
full-reset: ## üóëÔ∏è Complete reset (stop, clean, rebuild, start)
	@echo "üóëÔ∏è Performing full reset..."
	$(MAKE) down
	$(MAKE) clean
	@echo "üî® Rebuilding images..."
	$(DC) build --no-cache
	$(MAKE) dev-start
	@echo "‚úÖ Full reset completed!"

.PHONY: backup-db
backup-db: ## üíæ Backup database to file
	@echo "üíæ Creating database backup..."
	@mkdir -p ./backups
	$(DC) exec $(SERVICE_DB) sh -c 'mysqldump -u$${MYSQL_USER:-root} -p$${MYSQL_PASSWORD:-$$MYSQL_ROOT_PASSWORD} $${MYSQL_DATABASE}' > ./backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Database backed up to ./backups/"

.PHONY: watch-logs
watch-logs: ## üëÅÔ∏è Watch logs with better formatting
	@echo "üëÅÔ∏è Watching logs (press Ctrl+C to stop)..."
	$(DC) logs -f --tail=50 | while read line; do \
		echo "$(shell date '+%H:%M:%S') | $$line"; \
	done

.PHONY: performance-test
performance-test: ## üöÄ Simple performance test
	@echo "üöÄ Running simple performance test..."
	@command -v ab >/dev/null 2>&1 || (echo "‚ö†Ô∏è  Apache Bench (ab) not found. Install with 'brew install httpie' or 'apt-get install apache2-utils'" && exit 1)
	@ab -n 100 -c 10 http://localhost:$(BACKEND_PORT)/api/v1/products > /tmp/perf_test.log 2>&1 && \
		cat /tmp/perf_test.log | grep -E "Requests per second|Time per request|Failed requests" || \
		echo "‚ö†Ô∏è  Performance test failed. Check if backend is running."

.PHONY: dev-status
dev-status: ## üìä Complete development environment status
	@echo "üìä Development Environment Status"
	@echo "================================="
	@echo "üê≥ Docker Compose Status:"
	@$(DC) ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "  No services running"
	@echo "\nüåê Network Connectivity:"
	@curl -s -o /dev/null -w "  Backend API: %{http_code} (%{time_total}s)\n" http://localhost:$(BACKEND_PORT)/api/v1/products || echo "  Backend: Unreachable"
	@curl -s -o /dev/null -w "  Swagger UI: %{http_code} (%{time_total}s)\n" http://localhost:$(BACKEND_PORT)/swagger-ui/index.html || echo "  Swagger: Unreachable"
	@echo "\nüìã Recent Activity:"
	@$(DC) logs --tail=3 $(SERVICE_APP) 2>/dev/null | sed 's/^/  /' || echo "  No recent backend logs"
	@echo "\n‚ö° Quick Actions:"
	@echo "  make dev-start     ‚Üí Start environment"
	@echo "  make test-api      ‚Üí Test API endpoints"
	@echo "  make unit-test     ‚Üí Run unit tests with coverage"
	@echo "  make swagger       ‚Üí Open Swagger UI"

# ==== Day 7 - Unit Testing Commands ====

.PHONY: unit-test
unit-test: ## üß™ Run unit tests with JaCoCo coverage report
	@echo "üß™ Running unit tests with coverage..."
	@mkdir -p backend/build/reports/jacoco/test/html
	$(DC) --profile test build test-runner
	$(DC) --profile test run --rm test-runner
	@echo "\n‚úÖ Unit tests completed!"
	@echo "üìä Coverage report: backend/build/reports/jacoco/test/html/index.html"

.PHONY: unit-test-watch
unit-test-watch: ## üëÅÔ∏è Run unit tests in watch mode (re-run on file changes)
	@echo "üëÅÔ∏è Starting unit tests in watch mode..."
	@echo "‚ö†Ô∏è  This will re-run tests when source files change (Ctrl+C to stop)"
	$(DC) --profile test run --rm test-runner ./gradlew --no-daemon test --continuous

.PHONY: unit-test-single
unit-test-single: ## üéØ Run single test class (usage: make unit-test-single CLASS=ProductServiceTest)
	@if [ -z "$(CLASS)" ]; then \
		echo "‚ùå Usage: make unit-test-single CLASS=ProductServiceTest"; \
		exit 1; \
	fi
	@echo "üéØ Running single test class: $(CLASS)..."
	$(DC) --profile test run --rm test-runner ./gradlew --no-daemon test --tests "*$(CLASS)*" --info

.PHONY: unit-test-clean
unit-test-clean: ## üßπ Clean test reports and build artifacts
	@echo "üßπ Cleaning test artifacts..."
	@rm -rf backend/build/reports/tests/
	@rm -rf backend/build/reports/jacoco/
	@rm -rf backend/build/test-results/
	@echo "‚úÖ Test artifacts cleaned!"

.PHONY: unit-coverage
unit-coverage: ## üìä Generate and open coverage report
	@echo "üìä Generating coverage report..."
	$(DC) --profile test run --rm test-runner ./gradlew --no-daemon jacocoTestReport
	@echo "üìÇ Opening coverage report..."
	@if [ -f backend/build/reports/jacoco/test/html/index.html ]; then \
		echo "‚úÖ Coverage report: backend/build/reports/jacoco/test/html/index.html"; \
		command -v open >/dev/null 2>&1 && open backend/build/reports/jacoco/test/html/index.html || \
		command -v xdg-open >/dev/null 2>&1 && xdg-open backend/build/reports/jacoco/test/html/index.html || \
		echo "üìñ Please open: backend/build/reports/jacoco/test/html/index.html"; \
	else \
		echo "‚ùå Coverage report not found. Run 'make unit-test' first."; \
	fi

.PHONY: unit-test-logs
unit-test-logs: ## üìÑ Show detailed test logs
	@echo "üìÑ Recent test logs..."
	@if [ -d backend/build/reports/tests/test ]; then \
		find backend/build/reports/tests/test -name "*.html" -exec echo "üìÇ {}" \; -exec cat {} \; | head -50; \
	else \
		echo "‚ùå No test logs found. Run 'make unit-test' first."; \
	fi

.PHONY: test-all
test-all: ## üöÄ Run all types of tests (unit + API validation)
	@echo "üöÄ Running comprehensive test suite..."
	@echo "\n1Ô∏è‚É£ Running unit tests..."
	$(MAKE) unit-test
	@echo "\n2Ô∏è‚É£ Starting backend for API tests..."
	$(MAKE) dev-start
	@sleep 10
	@echo "\n3Ô∏è‚É£ Running API validation tests..."
	$(MAKE) test-api
	@echo "\n‚úÖ All tests completed successfully!"
